# -*- coding: utf-8 -*-
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from bs4 import BeautifulSoup
import aiohttp
import asyncio
from consts import *
import openai
import string
import requests

from data import db_session
from data.users import User
from data.big_data import Big_data
from data.statistics import Statistic
import datetime


async def location_kbrd():
    btn_loc = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location=True)
    # btn_loc2 = KeyboardButton('–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location=False)
    kbd = ReplyKeyboardMarkup([[btn_loc]], one_time_keyboard=True, resize_keyboard=True)
    return kbd


async def choose_way():
    keyboard = [
        [
            InlineKeyboardButton("–ì–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", callback_data="1")
        ],
        [
            InlineKeyboardButton("–¢–µ–∫—Å—Ç–æ–º (–Ω–∞–ø–∏—à—É –∞–¥—Ä–µ—Å)", callback_data="2")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_time_paths(a, b):
    url = f'https://yandex.ru/maps/?ll={a[1]}%2C{a[0]}&mode=routes&routes%5BactiveComparisonMode%5D=auto&rtext={a[0]}%2C{a[1]}~{b[0]}%2C{b[1]}&rtt=comparison'
    print(url)
    session = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    async with session.get(url) as res:
        txt = await res.text()
        res.close()
    await session.close()
    sp = BeautifulSoup(txt, 'html.parser')
    print(sp.text)
    res = []
    for i in sp.find_all('div', class_='comparison-route-snippet-view__route-title'):
        s = i.get_text(separator=';').split(';')
        res.append([s[0], s[1:]])
    cnt = 0
    for i in sp.find_all('div', class_='comparison-route-snippet-view__route-subtitle'):
        s = i.get_text()
        res[cnt][1].append(s)
        cnt += 1
    return res


async def make_path(geopos):
    res = await get_time_paths(geopos['from'], geopos['to'])
    if len(res) == 0:
        return -1
    image = await get_map(geopos['from'], geopos['to'])
    if image == -1:
        return -1
    return res, image


async def get_coords(address):
    geocoder_params = {
        "apikey": API_GEO,
        "geocode": address,
        "format": "json"}

    session = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    try:
        async with session.get(URL_GEOCODER, params=geocoder_params) as res:
            json_response = await res.json()
            res.close()
        await session.close()
    except Exception:
        await session.close()
        return -1

    toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
    toponym_coodrinates = toponym["Point"]["pos"]
    toponym_longitude, toponym_lattitude = toponym_coodrinates.split(" ")
    return float(toponym_lattitude), float(toponym_longitude)


async def get_address_text(pos):
    geocoder_params = {
        "apikey": API_GEO,
        "geocode": f"{pos[1]}, {pos[0]}",
        "format": "json"}

    session = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    try:
        async with session.get(URL_GEOCODER, params=geocoder_params) as res:
            json_response = await res.json()
            res.close()
            await session.close()
    except Exception:
        await session.close()
        return '-1'

    toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"] \
        ["metaDataProperty"]["GeocoderMetaData"]["text"]
    return toponym


async def get_map(a, b):
    map_params = {
        "ll": ",".join([str((a[1] + b[1]) / 2), str((a[0] + b[0]) / 2)]),
        "l": "map",
        "pt": "~".join([f"{a[1]},{a[0]},pm2am", f"{b[1]},{b[0]},pm2bm"])
    }
    print("~".join([f"{a[1]},{a[0]},pm2am", f"{b[1]},{b[0]},pm2bm"]))
    import requests
    try:
        image = requests.get(URL_MAPS, params=map_params).content
        return image
    except Exception:
        return -1
    session = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    try:
        async with session.get(URL_MAPS, params=map_params) as res:
            image = await res.content.read()
            res.close()
            await session.close()
    except Exception:
        await session.close()
        return -1

    return image


async def get_w(txt):
    if txt == 'clear':
        txt = 'üåû –Ø—Å–Ω–æ'
    elif txt == 'partly-cloudy':
        txt = 'üå§ –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ'
    elif txt == 'cloudy':
        txt = '‚õÖ–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏'
    elif txt == 'overcast':
        txt = '‚òÅ –ü–∞—Å–º—É—Ä–Ω–æ'
    elif txt == 'drizzle':
        txt = 'üåÇ–ú–æ—Ä–æ—Å—å'
    elif txt == 'light-rain':
        txt = 'üíß–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å'
    elif txt == 'rain':
        txt = '‚òî–î–æ–∂–¥—å'
    elif txt == 'moderate-rain':
        txt = 'üåß–£–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'
    elif txt == 'heavy-rain':
        txt = 'üåß–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'
    elif txt == 'continuous-heavy-rain':
        txt = 'üåßüåß–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'
    elif txt == 'showers':
        txt = 'üåßüåßüåß–õ–∏–≤–µ–Ω—å'
    elif txt == 'wet-snow':
        txt = 'üíß‚ùÑ–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º'
    elif txt == 'light-snow':
        txt = '‚ùÑ–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥'
    elif txt == 'snow':
        txt = '‚ùÑ‚òÉ–°–Ω–µ–≥'
    elif txt == 'snow-showers':
        txt = 'üå®–°–Ω–µ–≥–æ–ø–∞–¥'
    elif txt == 'hail':
        txt = 'üòµ–ì—Ä–∞–¥'
    elif txt == 'thunderstorm':
        txt = '‚ö°–ì—Ä–æ–∑–∞'
    elif txt == 'thunderstorm-with-rain':
        txt = '‚õà–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π'
    elif txt == 'thunderstorm-with-hail':
        txt = '‚õà‚õà–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
    return txt


async def get_dir(dir_, tmp=1):
    if tmp == 1:
        if dir_ == 'nw':
            return '‚Üò –°-–ó'
        if dir_ == 'n':
            return '‚¨á –°'
        if dir_ == 'ne':
            return '‚Üô –°-–í'
        if dir_ == 'e':
            return '‚¨Ö –í'
        if dir_ == 'se':
            return '‚Üñ –Æ-–í'
        if dir_ == 's':
            return '‚¨Ü –Æ'
        if dir_ == 'sw':
            return '‚Üó –Æ-–ó'
        if dir_ == 'w':
            return '‚û° –ó'
        return '–®—Ç–∏–ª—å'
    else:
        if dir_ == 'nw':
            return '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ.'
        if dir_ == 'n':
            return '—Å–µ–≤–µ—Ä–Ω–æ–µ'
        if dir_ == 'ne':
            return '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ'
        if dir_ == 'e':
            return '–≤–æ—Å—Ç–æ—á–Ω–æ–µ'
        if dir_ == 'se':
            return '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ'
        if dir_ == 's':
            return '—é–∂–Ω–æ–µ'
        if dir_ == 'sw':
            return '—é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ'
        if dir_ == 'w':
            return '–∑–∞–ø–∞–¥–Ω–æ–µ'
        return '–®—Ç–∏–ª—å'


async def get_cl(cl):
    if cl == 0:
        return '–Ø—Å–Ω–æ'
    if cl == 0.25:
        return '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ'
    if cl == 0.5 or cl == 0.75:
        return '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏'
    return '–ü–∞—Å–º—É—Ä–Ω–æ'


async def get_weather(response, name_from, date="fact"):
    phenom = {"fog": "—Ç—É–º–∞–Ω",
              "mist": "–¥—ã–º–∫–∞",
              "smoke": "—Å–º–æ–≥",
              "dust": "–ø—ã–ª—å",
              "dust-suspension": "–ø—ã–ª–µ–≤–∞—è –≤–∑–≤–µ—Å—å",
              "duststorm": "–ø—ã–ª—å–Ω–∞—è –±—É—Ä—è",
              "thunderstorm-with-duststorm": "–ø—ã–ª—å–Ω–∞—è –±—É—Ä—è —Å –≥—Ä–æ–∑–æ–π",
              "drifting-snow": "—Å–ª–∞–±–∞—è –º–µ—Ç–µ–ª—å",
              "blowing-snow": "–º–µ—Ç–µ–ª—å",
              "ice-pellets": "–ª–µ–¥—è–Ω–∞—è –∫—Ä—É–ø–∞",
              "freezing-rain": "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
              "tornado": "—Ç–æ—Ä–Ω–∞–¥–æ",
              "volcanic-ash": "–≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª"}
    for_robot = f"–ü–æ–≥–æ–¥–∞ –≤ {name_from}.\n–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    text = f"üåç –ü–æ–≥–æ–¥–∞ –≤ {name_from} –Ω–∞ –¥–∞—Ç—É {response['forecasts'][0]['date']}\n–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    text + "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è:\n"
    for_robot += "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è:\n"
    if date == "fact":
        now = response['fact']
    else:
        now = response["forecasts"][date]["parts"]["day"]
    text += f"–û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬∞C: üå°{now['feels_like']}\n"
    for_robot += f"–û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {now['feels_like']} –≥—Ä–∞–¥—É—Å–æ–≤.\n"
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {await get_w(now['condition'])}\n"
    for_robot += f"–û–ø–∏—Å–∞–Ω–∏–µ: {await get_w(now['condition'])}.\n"
    text += f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –¥–æ üí®{now['wind_speed']} –º\—Å\n"
    for_robot += f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –¥–æ {now['wind_speed']} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É.\n"
    text += f"–î–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {now['pressure_mm']} –º–º.—Ä—Ç.—Å—Ç\n"
    for_robot += f"–î–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {now['pressure_mm']} –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ —Ä—Ç—É—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±–∞.\n"
    text += f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    for_robot += "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    if now.get('temp_water'):
        text += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã üåä{now['temp_water']} ¬∞C\n"
        for_robot += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã {now['temp_water']} –≥—Ä–∞–¥—É—Å–æ–≤."
    text += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ üí® {await get_dir(now['wind_dir'])}\n"
    for_robot += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ üí® {await get_dir(now['wind_dir'], tmp=2)}.\n"
    text += f"–í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {now['humidity']}%\n"
    for_robot += f"–í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {now['humidity']} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.\n"
    text += f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {await get_cl(now['cloudness'])}\n"
    for_robot += f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {await get_cl(now['cloudness'])}\n"
    if now.get('phenom_condition'):
        text += f"–î–æ–ø. –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {phenom[now['phenom_condition']]}"
        for_robot += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {phenom[now['phenom_condition']]}"
    return text, for_robot


async def get_anecdot():
    url = 'http://anecdotica.ru/'
    session = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    async with session.get(url) as res:
        page = await res.text()
        res.close()
    await session.close()
    sp = BeautifulSoup(page, 'html.parser')
    res = []
    for i in sp.find_all('div', class_='item_text'):
        res.append(i.get_text())
    return '\n'.join(res)


def get_answer(prompt):
    completion = openai.Completion.create(engine="text-davinci-003", prompt=prompt, temperature=0.7,
                                          max_tokens=1000)
    return completion.choices[0]['text']


def prepare_for_markdown(text, spoiler=True):
    res = ''
    if spoiler:
        res += '|| '
    for i in text:
        if i in string.punctuation:
            res += '\\' + i
        else:
            res += i
    if spoiler:
        return res + ' ||'
    return res


async def get_news_list():
    session = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    async with session.get('https://life.ru/s/novosti') as res:
        page = await res.text()
    sp = BeautifulSoup(page, 'html.parser')
    arr = []
    for i in sp.find_all('a', class_='styles_root__2aHN8 styles_l__3AE69 styles_news__15P0n'):
        tmp = i.get_text('###').split('###')
        themes = "üî• " + " ".join([f"#{el.replace(' ', '_')}" for el in tmp[:-2]]) + "\n\n"
        name = "‚ö° " + tmp[-2] + "\n\n"
        time = "üïú " + tmp[-1]
        link = 'https://life.ru' + i.get('href')
        arr.append((name, f"{themes + name + time}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ üëâ{link}"))
    return arr


def put_to_db(update):
    db_sess = db_session.create_session()
    user__id = update.message.from_user.id
    if db_sess.query(User).filter(User.telegram_id == user__id).first():
        if not db_sess.query(User).filter(User.telegram_id == user__id, User.chat_id == update.message.chat.id).first():
            user = User(chat_id=update.message.chat.id, telegram_id=user__id, name=update.message.from_user.name)
            db_sess.add(user)
    else:
        user = User(chat_id=update.message.chat.id, telegram_id=user__id, name=update.message.from_user.name)
        db_sess.add(user)
        db_sess.commit()
        db_sess = db_session.create_session()
        statistic = Statistic(user_id=user__id)
        db_sess.add(statistic)
    db_sess.commit()


def total_msg_func(update, msg_format="text"):
    db_sess = db_session.create_session()
    put_to_db(update)
    user = db_sess.query(Statistic).filter(Statistic.user_id == update.message.from_user.id).first()
    if msg_format == "text":
        user.total_len += len("".join(update.message.text.split()))
        user.total_msgs += 1
    else:
        user.total_seconds += datetime.timedelta(seconds=update.message.voice.duration)
        user.total_voices += 1
    big_data = Big_data(user_id=user.user_id, type=msg_format)
    db_sess.add(big_data)
    db_sess.commit()


if __name__ == '__main__':
    print(get_answer('–ü—Ä–∏–≤–µ—Ç–∏–∫–∏-–ø–∏—Å—Ç–æ–ª–µ—Ç–∏–∫–∏! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?'))
